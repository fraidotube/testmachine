from fastapi import APIRouter, Form, Request
from fastapi.responses import HTMLResponse, JSONResponse
from util.shell import run
import os, re, shutil, tempfile

router = APIRouter()

CONF_PORTS = "/etc/apache2/conf-available/testmachine-ports.conf"
VHOST_FILE = "/etc/apache2/sites-available/testmachine.conf"

def _read_ports():
    ports = set()
    if os.path.exists(CONF_PORTS):
        with open(CONF_PORTS) as f:
            for line in f:
                m = re.match(r"\s*Listen\s+(\d+)\s*$", line)
                if m:
                    ports.add(int(m.group(1)))
    return ports

def _write_ports(ports:set[int]):
    lines = [f"Listen {p}\n" for p in sorted(ports)]
    os.makedirs(os.path.dirname(CONF_PORTS), exist_ok=True)
    with open(CONF_PORTS, "w") as f:
        f.writelines(lines)

def _build_vhost_block(p:int)->str:
    # ATTENZIONE: le graffe intorno ad APACHE_LOG_DIR sono raddoppiate
    # per non farle interpretare da str.format().
    tmpl = """
<VirtualHost *:{p}>
    ServerName testmachine.local
    ProxyPreserveHost On
    ProxyPass        /api/ws ws://127.0.0.1:9000/api/ws
    ProxyPassReverse /api/ws ws://127.0.0.1:9000/api/ws
    ProxyPass        / http://127.0.0.1:9000/
    ProxyPassReverse / http://127.0.0.1:9000/
    ErrorLog ${{APACHE_LOG_DIR}}/testmachine-error.log
    CustomLog ${{APACHE_LOG_DIR}}/testmachine-access.log combined
</VirtualHost>
""".strip("\n")
    return tmpl.format(p=p)

def _write_vhost(ports:set[int]):
    body = "\n\n".join(_build_vhost_block(p) for p in sorted(ports))
    os.makedirs(os.path.dirname(VHOST_FILE), exist_ok=True)
    with open(VHOST_FILE, "w") as f:
        f.write(body + "\n")

def _ensure_enabled():
    run("a2enconf testmachine-ports")
    run("a2ensite testmachine")

def _apache_reload_checked()->tuple[bool,str]:
    ok, out, err = run("apache2ctl configtest")
    if not ok:
        return False, err or out
    ok, out, err = run("systemctl reload apache2")
    return ok, err or out

def head(title:str)->str:
    return f"""<!doctype html><html><head><meta charset='utf-8'/>
<meta name='viewport' content='width=device-width,initial-scale=1'/>
<title>{title}</title><link rel='stylesheet' href='/static/styles.css'/></head><body>
<div class='container'><div class='nav'><div class='brand'>üõ†Ô∏è TestMachine</div>
<div class='links'><a href='/'>Home</a><a href='/wan'>WAN</a><a href='/lan'>LAN</a><a href='/settings'>Impostazioni</a></div></div>"""

@router.get("/settings/", response_class=HTMLResponse)
def settings_page():
    ports = sorted(_read_ports() or {8080, 8081})
    current = ", ".join(str(p) for p in ports)
    return head("Impostazioni") + f"""
<div class='card'>
  <h2>Porta Web (Apache)</h2>
  <p>Porte attive: <b>{current}</b></p>
  <form method="post" action="/settings/port" style="max-width:420px">
    <label>Nuova porta (1024-65535)</label>
    <input name="port" placeholder="es. 8082" />
    <button class="btn" type="submit">Applica</button>
  </form>
  <p style="margin-top:12px;">L'8080 resta sempre attiva come salvataggio.</p>
</div>
</div></body></html>
"""

@router.post("/settings/port", response_class=HTMLResponse)
def set_port(port: int = Form(...)):
    # Validazione
    if port < 1024 or port > 65535:
        return HTMLResponse(head("Errore") + f"<div class='card'>Porta non valida: {port}</div></div></body></html>", status_code=400)

    # Stato attuale
    before_ports = _read_ports()
    if not before_ports:
        before_ports = {8080, 8081}
    # Aggiungi, mantenendo SEMPRE 8080
    after_ports = set(before_ports)
    after_ports.add(8080)
    after_ports.add(port)

    # Prepara rollback
    backup_ports = tempfile.NamedTemporaryFile(delete=False)
    backup_vhost = tempfile.NamedTemporaryFile(delete=False)
    try:
        if os.path.exists(CONF_PORTS):
            shutil.copy2(CONF_PORTS, backup_ports.name)
        if os.path.exists(VHOST_FILE):
            shutil.copy2(VHOST_FILE, backup_vhost.name)

        # Scrivi nuove conf
        _write_ports(after_ports)
        _write_vhost(after_ports)
        _ensure_enabled()

        ok, msg = _apache_reload_checked()
        if not ok:
            # rollback
            if os.path.exists(backup_ports.name):
                shutil.copy2(backup_ports.name, CONF_PORTS)
            if os.path.exists(backup_vhost.name):
                shutil.copy2(backup_vhost.name, VHOST_FILE)
            _apache_reload_checked()
            return HTMLResponse(head("Errore") + f"<div class='card'><h3>Config Apache non valida</h3><pre>{msg}</pre></div></div></body></html>", status_code=500)

        return HTMLResponse(head("OK") + f"<div class='card'>Porta aggiunta: <b>{port}</b> (8080 resta attiva). <br/><a href='/'>Indietro</a></div></div></body></html>")
    finally:
        try: os.unlink(backup_ports.name)
        except: pass
        try: os.unlink(backup_vhost.name)
        except: pass
