from fastapi import APIRouter, Form, Request
from fastapi.responses import HTMLResponse
import os, re, time, subprocess, shutil

router = APIRouter()

VHOST  = "/etc/apache2/sites-available/testmachine.conf"
PORTS  = "/etc/apache2/ports.conf"
TMPDIR = "/var/lib/netprobe/tmp"
os.makedirs(TMPDIR, exist_ok=True)

def sh(args:list[str]):
    p = subprocess.run(args, capture_output=True, text=True)
    return {"ok": p.returncode == 0, "rc": p.returncode, "out": p.stdout, "err": p.stderr}

def head(title:str)->str:
    return (
        "<!doctype html><html><head><meta charset='utf-8'/>"
        "<meta name='viewport' content='width=device-width,initial-scale=1'/>"
        f"<title>{title}</title><link rel='stylesheet' href='/static/styles.css'/>"
        "</head><body><div class='container'>"
        "<div class='nav'><div class='brand'>üõ†Ô∏è TestMachine</div>"
        "<div class='links'><a href='/'>Home</a><a href='/wan/'>WAN</a><a href='/lan/'>LAN</a></div></div>"
    )

def foot()->str:
    return "</div></body></html>"

def current_port_from_vhost()->int|None:
    try:
        with open(VHOST, "r") as f:
            txt = f.read()
        m = re.search(r"(?m)^\s*Listen\s+(\d+)\s*$", txt)
        if m: return int(m.group(1))
        m = re.search(r"<VirtualHost\s+\*:(\d+)>", txt)
        if m: return int(m.group(1))
    except FileNotFoundError:
        pass
    return None

def build_ports_conf()->str:
    # ports.conf resta pulito: solo 80/443
    return (
        "Listen 80\n"
        "<IfModule ssl_module>\n    Listen 443\n</IfModule>\n"
        "<IfModule mod_gnutls.c>\n    Listen 443\n</IfModule>\n"
    )

def build_vhost(new_port:int)->str:
    return (
        f"Listen {new_port}\n"
        f"<VirtualHost *:{new_port}>\n"
        "    ServerName testmachine.local\n"
        "    ProxyPreserveHost On\n"
        "    ProxyPass        /api/ws ws://127.0.0.1:9000/api/ws\n"
        "    ProxyPassReverse /api/ws ws://127.0.0.1:9000/api/ws\n"
        "    ProxyPass        / http://127.0.0.1:9000/\n"
        "    ProxyPassReverse / http://127.0.0.1:9000/\n"
        "    ErrorLog /var/log/apache2/testmachine-error.log\n"
        "    CustomLog /var/log/apache2/testmachine-access.log combined\n"
        "</VirtualHost>\n"
    )

@router.get("/", response_class=HTMLResponse)
def settings_page(request: Request):
    cur = current_port_from_vhost() or 8080
    return HTMLResponse(
        head("Impostazioni") +
        "<div class='card'><h2>Porta Web (Apache)</h2>"
        "<form method='post' action='/settings/port' class='form'>"
        f"<label>Porta</label><input name='port' value='{cur}' />"
        "<button class='btn'>Applica</button>"
        "</form>"
        "<p class='muted'>Applichiamo il cambio porta solo se il configtest √® OK; poi riavviamo Apache in background. Se fallisce, rollback.</p>"
        "</div>" + foot()
    )

@router.post("/port", response_class=HTMLResponse)
def set_port(port: int = Form(...), request: Request = None):
    # Validazioni
    if not (1 <= port <= 65535):
        return HTMLResponse(head("Errore") + "<pre>Porta non valida.</pre>" + foot(), status_code=400)
    if port in (80, 443, 9000):
        return HTMLResponse(head("Errore") + "<pre>Porta riservata.</pre>" + foot(), status_code=400)

    cur = current_port_from_vhost()
    if cur == port:
        return HTMLResponse(head("Nessuna modifica") + f"<p>La porta √® gi√† {port}.</p>" + foot())

    ts = str(int(time.time()))
    tmp_ports = os.path.join(TMPDIR, f"ports.conf.{ts}")
    tmp_vhost = os.path.join(TMPDIR, f"testmachine.conf.{ts}")
    bak_ports = os.path.join(TMPDIR, f"ports.conf.bak.{ts}")
    bak_vhost = os.path.join(TMPDIR, f"testmachine.conf.bak.{ts}")

    # Scrive temporanei
    open(tmp_ports, "w").write(build_ports_conf())
    open(tmp_vhost, "w").write(build_vhost(port))

    # Backup
    if os.path.exists(PORTS): shutil.copy2(PORTS, bak_ports)
    if os.path.exists(VHOST): shutil.copy2(VHOST, bak_vhost)

    # Installa
    r1 = sh(["sudo","/usr/bin/install","-m","644", tmp_ports, PORTS])
    r2 = sh(["sudo","/usr/bin/install","-m","644", tmp_vhost, VHOST])
    if not (r1["ok"] and r2["ok"]):
        return HTMLResponse(head("Errore install") + f"<pre>{r1['out']}{r1['err']}\n{r2['out']}{r2['err']}</pre>" + foot(), status_code=500)

    # Test configurazione
    t = sh(["sudo","/usr/sbin/apache2ctl","configtest"])
    if not t["ok"]:
        # rollback
        if os.path.exists(bak_ports): sh(["sudo","/usr/bin/install","-m","644", bak_ports, PORTS])
        if os.path.exists(bak_vhost): sh(["sudo","/usr/bin/install","-m","644", bak_vhost, VHOST])
        sh(["sudo","/usr/sbin/apache2ctl","graceful"])
        return HTMLResponse(head("Errore configtest") + f"<pre>{t['out']}{t['err']}</pre>" + foot(), status_code=500)

    # *** Riavvio in background (per non troncare la POST) ***
    subprocess.Popen(["/bin/sh","-lc","sleep 0.2; sudo /bin/systemctl restart apache2 >/dev/null 2>&1 &"],
                     start_new_session=True)

    host = (request.headers.get("x-forwarded-host") or request.headers.get("host") or (request.url.hostname or "localhost")).split(":",1)[0] if request else "localhost"
    # Auto-redirect dopo 3s
    html = (
        head("Porta cambiata") +
        f"<meta http-equiv='refresh' content='3;url=http://{host}:{port}/'/>"
        f"<p>Porta impostata a <b>{port}</b>. Tra qualche secondo verrai reindirizzato.</p>"
        f"<p><a class='btn' href='http://{host}:{port}/'>Apri subito</a></p>" +
        foot()
    )
    return HTMLResponse(html)
# --- helper per redirect corretto ---
def _server_url(request: Request, new_port: int) -> str:
    host = (request.headers.get("x-forwarded-host")
            or request.headers.get("host")
            or request.url.hostname
            or "localhost")
    # elimina eventuale :porta da Host
    if host.startswith('['):          # IPv6 tipo [fe80::1]:8080
        host = host.split(']')[0].strip('[]')
    elif ':' in host:
        host = host.split(':', 1)[0]
    scheme = (request.headers.get("x-forwarded-proto")
              or request.url.scheme
              or "http").split(',')[0].strip()
    return f"{scheme}://{host}:{new_port}/"
