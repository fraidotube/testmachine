from fastapi import APIRouter, Request, Query
from fastapi.responses import HTMLResponse, JSONResponse, RedirectResponse, PlainTextResponse
from pathlib import Path
import re
from util.shell import run

router = APIRouter()
TARGETS = Path("/etc/smokeping/config.d/Targets")

NAV = """<div class='nav'><div class='brand'><img src='/static/img/logo.svg' alt='Logo' class='logo'><span>TestMachine</span></div><div class='links'><a href='/'>Home</a></div></div>"""

def head(title:str)->str:
    return f"<!doctype html><html><head><meta charset='utf-8'/><meta name='viewport' content='width=device-width,initial-scale=1'/><title>{title}</title><link rel='stylesheet' href='/static/styles.css'/></head><body><div class='container'>{NAV}"

def ensure_block(txt:str)->str:
    """Crea (se manca) il blocco TM_MANAGED minimal sotto il root."""
    if "# BEGIN TM_MANAGED" in txt and "# END TM_MANAGED" in txt:
        return txt
    stub = (
        "\n\n# BEGIN TM_MANAGED\n"
        "+ TestMachine\n"
        "menu = TestMachine\n"
        "title = Hosts gestiti da TestMachine\n\n"
        "# END TM_MANAGED\n"
    )
    # Inserisco lo stub alla fine del file per evitare di rompere la gerarchia esistente
    return txt.rstrip()+"\n"+stub

def parse_hosts(txt:str):
    """Ritorna lista [(name,address)] dal blocco TM_MANAGED."""
    m = re.search(r"# BEGIN TM_MANAGED(.*?)# END TM_MANAGED", txt, re.S)
    hosts = []
    if not m:
        return hosts
    block = m.group(1)
    # trova blocchi "++ name" e la riga host = addr (tollerante a spazi/commenti)
    for sec in re.finditer(r"^\s*\+\+\s*([^\s#]+)[\s\S]*?\n\s*host\s*=\s*([^\s#]+)", block, re.M):
        name = sec.group(1).strip()
        addr = sec.group(2).strip()
        if name and addr:
            hosts.append((name, addr))
    return hosts

def add_host_to_text(txt:str, name:str, address:str)->str:
    """Inserisce/aggiorna ++ name dentro TM_MANAGED."""
    txt = ensure_block(txt)
    # sostituisci se esiste gi√†
    pattern = re.compile(r"(\# BEGIN TM_MANAGED[\s\S]*?\+ TestMachine[\s\S]*?)(\+\+\s*"+re.escape(name)+r"[\s\S]*?\n(?=\+\+|\# END TM_MANAGED))", re.M)
    if pattern.search(txt):
        new_block = f"++ {name}\nmenu = {name}\ntitle = {name}\nhost = {address}\n"
        txt = pattern.sub(r"\1"+new_block, txt, count=1)
        return txt
    # altrimenti inserisci prima di # END TM_MANAGED
    insert_re = re.compile(r"(# BEGIN TM_MANAGED[\s\S]*?# END TM_MANAGED)", re.M)
    def _ins(m):
        block = m.group(1)
        block = block.replace("# END TM_MANAGED",
                              f"++ {name}\nmenu = {name}\ntitle = {name}\nhost = {address}\n# END TM_MANAGED")
        return block
    return insert_re.sub(_ins, txt, count=1)

@router.get("/", response_class=HTMLResponse)
def admin_home(request: Request):
    return head("SmokePing Admin")+"""
    <div class='grid'><div class='card'>
      <h2>SmokePing Admin</h2>
      <p>Sezione amministrativa minima. Qui gestisci target e servizio.</p>
      <div class='row'>
        <a class='btn secondary' href='/smokeping/'>Apri interfaccia SmokePing</a>
        <a class='btn secondary' href='/sp-admin/targets'>Vedi/gestisci Targets</a>
      </div>
      <a class='btn danger' href='/sp-admin/restart'>Riavvia servizio</a>
    </div></div></div></body></html>"""

@router.get("/targets", response_class=HTMLResponse)
def targets_page(request: Request):
    txt = TARGETS.read_text(encoding="utf-8")
    txt = ensure_block(txt)
    hosts = parse_hosts(txt)
    rows = "\n".join(f"<tr><td>{n}</td><td>{a}</td></tr>" for n,a in hosts) or "<tr><td colspan='2'>Nessun host gestito.</td></tr>"
    return head("Targets")+f"""
    <div class='grid'><div class='card'>
      <h2>Gestione Targets</h2>
      <div class='row'>
        <div style='flex:1; min-width:260px;'>
          <h3>Host gestiti</h3>
          <table class='table'>
            <thead><tr><th>Nome</th><th>Indirizzo</th></tr></thead>
            <tbody>{rows}</tbody>
          </table>
        </div>
        <div style='flex:1; min-width:260px;'>
          <h3>Aggiungi host</h3>
          <form method='get' action='/sp-admin/hosts/add'>
            <label>Nome</label>
            <input name='name' value='host1'/>
            <label>Indirizzo/IP</label>
            <input name='address' value='192.168.100.20'/>
            <button class='btn' type='submit'>Aggiungi</button>
          </form>
          <p class='muted'>Gli host vengono inseriti sotto il gruppo <b>TestMachine</b>.</p>
          <a class='btn secondary' href='/sp-admin/targets/raw'>Vedi file Targets (raw)</a>
        </div>
      </div>
    </div></div></div></body></html>"""

@router.get("/targets/raw", response_class=HTMLResponse)
def targets_raw(request: Request):
    txt = TARGETS.read_text(encoding="utf-8")
    return head("Targets")+f"<div class='grid'><div class='card'><pre>{html_escape(txt)}</pre></div></div></div></body></html>"

def html_escape(s:str)->str:
    return (s.replace("&","&amp;").replace("<","&lt;").replace(">","&gt;"))

@router.get("/hosts/add")
def add_host(name: str = Query(None), address: str = Query(None)):
    if not name or not address:
        return JSONResponse({"detail":"name e address sono obbligatori"}, status_code=400)
    txt = TARGETS.read_text(encoding="utf-8")
    new_txt = add_host_to_text(txt, name.strip(), address.strip())
    TARGETS.write_text(new_txt, encoding="utf-8")
    # Controllo sintassi
    rc, out, err = run(["/usr/sbin/smokeping","--check"])
    if rc != 0:
        # rollback
        TARGETS.write_text(txt, encoding="utf-8")
        return JSONResponse({"status":"error","detail":"Config non valida","check_out":out,"check_err":err}, status_code=500)
    # reload servizio (soft)
    run(["/bin/systemctl","reload-or-restart","smokeping"])
    # redirect alla lista
    return RedirectResponse(url="/sp-admin/targets", status_code=302)

@router.get("/restart")
def restart():
    rc, out, err = run(["/bin/systemctl","restart","smokeping"])
    if rc != 0:
        return JSONResponse({"status":"error","out":out,"err":err}, status_code=500)
    return RedirectResponse(url="/sp-admin/", status_code=302)
